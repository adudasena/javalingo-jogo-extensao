const KEY = "javalingo_progress_v1";

function loadAll() {
  try {
    return JSON.parse(localStorage.getItem(KEY)) || {};
  } catch {
    return {};
  }
}

function saveAll(all) {
  localStorage.setItem(KEY, JSON.stringify(all));
}

/**
 * üìä Retorna o progresso do usu√°rio (n√≠veis conclu√≠dos e maior desbloqueado)
 */
export function getProgress(user = "demo") {
  const all = loadAll();
  if (!all[user]) {
    all[user] = { highestUnlocked: 1, completed: [] }; // come√ßa no n√≠vel 1
    saveAll(all);
  }
  return all[user];
}

/**
 * üèÜ Marca um n√≠vel como conclu√≠do e libera o pr√≥ximo
 */
export function completeLevel(level, user = "demo") {
  const all = loadAll();
  const p = getProgress(user);

  // Garante que n√£o repete n√≠vel conclu√≠do
  if (!p.completed.includes(level)) {
    p.completed.push(level);
  }

  // üîì Libera o pr√≥ximo n√≠vel sempre que o atual for o mais alto alcan√ßado
  if (p.highestUnlocked <= level && level < 50) {
    p.highestUnlocked = level + 1;
  }

  // üîÅ Salva e retorna
  all[user] = p;
  saveAll(all);
  console.log(`‚úÖ ${user} concluiu n√≠vel ${level}, agora liberado at√© ${p.highestUnlocked}`);
  return p;
}
